####################################
# Mattijs Korpershoek              #
# <mattijs.korpershoek@gmail.com>  #
# Alexandre Montilla               #
# <alexandre.montilla@gmail.com>   #
####################################

Liste des dossiers:
===================
ClassDiagram
      contient un diagramme représentation les liens d'inclusion des différentes sources.
dataPlots
      contient quelques graphiques avec des données mesurées en fonction de la précision.
doc
      contient la documentation que nous avons utilisés pour réaliser ce driver.
exampleCode
      contient le code d'exemple sur lequel nous nous sommes basés
      (en particulier pour les timings du protocole One-Wire)
scripts
      contient les procédé de compilation de GCC ainsi que la compilation du noyau
      sunxi utilisé sur la carte. Ces scripts ont été modifiés par nous afin d'avoir les options
      de gcc qui nous interessent. (pas de hf par exemple.)
src
      contient l'ensemble des fichiers sources du driver.
      chaque fichier header dispose d'une description du module, retranscrit ci-dessous

Liste des fichiers sources:
===========================
==> BitOperations.h <==
 * Interface to the GPIO
 * Read linux-sunxi/Documentation/gpio.txt for more information
 *
 * Interface can be found here: linux-sunx/drivers/gpio/gpio-sunxi.{c, h}

==> DiscoveryProtocol.h <==
 * Implements the sensor id discovery process
 * which is called after a SEARCH_ROM command

==> GlobalData.h <==
 * All the interfaces used
 * to communicate between functions

==> Klogger.h <==
 * conditional kernel logging for more
 * efficient debugging

==> Led.h <==
 * Led module for the OlinuXinO board
 * Can be used to test if gpio communication is working correctly

==> LinkedList.h <==

==> OneWire.h <==
 * Handles the different one-wire timings
 * in order to communicate properly with the
 * Maxim DS18B2

==> SensorID.h <==
 * Implements high level functions related to
 * the SensorID (unique id attributed by Maxim)

==> SensorOperations.h <==
 * Implements high level functions related to
 * the functionalities expected by the driver
 * (read temperature and setresolution)

==> TemperatureResolution.h <==
 * generates a scratchpad which can be send
 * to a sensor to change his resolution

==> TemperatureScratchpad.h <==
 * Handles temperature receiving,
 * conversion and scratchpad read/write
